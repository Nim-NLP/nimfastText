[n.global]
output = nimfastText

[n.include]
nimfastText/src

[n.prepare]
gitremote = "https://github.com/facebookresearch/fastText"
gitsparse = """
src/*
"""

[n.post]
reset = true

[n.wildcard]
wildcard = *.h

search.1 = "enum class"
replace.1 = enum

regex.2 = """: [a-z0-9_]+ \{"""
replace.2 = "{"

regex.3 = """([A-Za-z&]+ operator=)"""
replace.3 = "//$1"

search.4 = " = delete"
replace.4 = ""

search.5 = "((__deprecated__"
comment.5 = 1

regex.6 = """([u]?int[\d]+)_t"""
replace.6 = "$1"

[fasttext.h]
preprocess = true
defines = true
recurse = true
flags = "--stdcall --cpp --suffix:_"
ppflags = "-std=c++0x"

search.1 = "tokenCount_{}"
replace.1 = "tokenCount_"

search.2 = "loss_{}"
replace.2 = "loss_"

compile = nimfastText/src
pragma-lin = "passL: \"-lpthread\""

[args.nim]
search.0 = string
replace.0 = std_string

prepend = """type
  vector {.importc: "std::vector", header: "<vector>".}[T] = object
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  istream {.importc: "std::istream", header: "<istream>".} = object
  std_string {.importc: "std::string", header: "<string>".} = object
"""

[dictionary.nim]
search.0 = string
replace.0 = std_string

prepend = """type
  vector {.importc: "std::vector", header: "<vector>".}[T] = object
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  istream {.importc: "std::istream", header: "<istream>".} = object
  shared_ptr {.importc: "std::shared_ptr", header: "<memory>".}[T] = object
  minstd_rand {.importc: "std::minstd_rand", header: "<random>".} = object
  std_string {.importc: "std::string", header: "<string>".} = object
"""

search.1 = nullptr
replace.1 = nil

search.2 = "__get_nil_t()"
replace.2 = nil

[matrix.nim]
prepend = """type
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  istream {.importc: "std::istream", header: "<istream>".} = object
  Vector = object
"""

[vector.nim]
prepend = """type
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  Matrix = object
  QMatrix = object
"""

[productquantizer.nim]
prepend = """type
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  istream {.importc: "std::istream", header: "<istream>".} = object
""" 

[qmatrix.nim]
prepend = """type
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  istream {.importc: "std::istream", header: "<istream>".} = object
""" 

[model.nim]
prepend = """type
  shared_ptr {.importc: "std::shared_ptr", header: "<memory>".}[T] = object
  minstd_rand {.importc: "std::minstd_rand", header: "<random>".} = object
  vect {.importc: "std::vector", header: "<vector>".}[T] = object
  pair {.importc: "std::pair", header: "<utility>".}[T, U] = object
  real = float
"""

search.1 = "vector["
replace.1 = "vect["

search.2 = "import nimfastText/real"
comment.2 = 1

[utils.nim]
prepend = """type
  ifstream {.importc: "std::ifstream", header: "<fstream>".} = object
"""

[fasttext.nim]
search.0 = string
replace.0 = std_string

prepend = """type
  shared_ptr {.importc: "std::shared_ptr", header: "<memory>".}[T] = object
  ostream {.importc: "std::ostream", header: "<ostream>".} = object
  istream {.importc: "std::istream", header: "<istream>".} = object
  vect {.importc: "std::vector", header: "<vector>".}[T] = object
  `tuple` {.importc: "std::tuple", header: "<tuple>".}[T, U, V] = object
  pair {.importc: "std::pair", header: "<utility>".}[T, U] = object
  real = float
  std_set {.importc: "std::set", header: "<set>".}[T] = object
  std_string* {.importc: "std::string", header: "<string>".} = object

proc constructStdString*(s: cstring): std_string {.importcpp: "std::string(@)", constructor, header: "<string>".}
"""

search.1 = "vector["
replace.1 = "vect["

search.2 = "import nimfastText/real"
comment.2 = 1

search.3 = "set["
replace.3 = "std_set["

search.4 = "{.compile: \"nimfastText/src/main.cc\".}"
comment.4 = 1

